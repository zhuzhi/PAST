M <- 10
N_case <- 1000
N_control <- 1000
q <- sample(q_pool, M)
alpha <- rep(0.01, times=M)
beta <- rep(0, M)
noise <- runif(n=M, min=-1e-2, max=1e-2)
beta <- beta+noise
data_table <- table_bayes_datagen(M=M, N_case=N_case, N_control=N_control, q=q, alpha=alpha, beta=beta)
C_1 <- qnorm(p = 1-alpha_level)
M <- ncol(data_table)
#   C_2 <- 1/(
#     N_case/N_control + C_1^2/(4*N_control*p_hat) +
#       sqrt(
#         (N_case/N_control + N_case^2/N_control^2)*C_1^2/(2*N_control*p_hat) +
#           C_1^4 /(16*N_control^2*p_hat^2)
#       )
#   )
T_result <- numeric(M)
D_set <- numeric(0)
for(j in 1:M){
X_case <- sum(data_table["case", j])
X_control <- sum(data_table["control", j])
if(X_case==0 & X_control==0){
next
}
T_result[j] <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
if(T_result[j] >= C_1){
D_set <- c(D_set, j)
}
}
if(length(D_set)==0){
T_result <- 0
T_result
}else{
X_case <- sum(data_table["case", D_set])
X_control <- sum(data_table["control", D_set])
T_result <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
T_result
}
M <- 10
N_case <- 1000
N_control <- 1000
q <- sample(q_pool, M)
alpha <- rep(0.01, times=M)
beta <- rep(0, M)
noise <- runif(n=M, min=-1e-2, max=1e-2)
beta <- beta+noise
data_table <- table_bayes_datagen(M=M, N_case=N_case, N_control=N_control, q=q, alpha=alpha, beta=beta)
C_1 <- qnorm(p = 1-alpha_level)
M <- ncol(data_table)
#   C_2 <- 1/(
#     N_case/N_control + C_1^2/(4*N_control*p_hat) +
#       sqrt(
#         (N_case/N_control + N_case^2/N_control^2)*C_1^2/(2*N_control*p_hat) +
#           C_1^4 /(16*N_control^2*p_hat^2)
#       )
#   )
T_result <- numeric(M)
D_set <- numeric(0)
for(j in 1:M){
X_case <- sum(data_table["case", j])
X_control <- sum(data_table["control", j])
if(X_case==0 & X_control==0){
next
}
T_result[j] <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
if(T_result[j] >= C_1){
D_set <- c(D_set, j)
}
}
if(length(D_set)==0){
T_result <- 0
T_result
}else{
X_case <- sum(data_table["case", D_set])
X_control <- sum(data_table["control", D_set])
T_result <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
T_result
}
M <- 10
N_case <- 1000
N_control <- 1000
q <- sample(q_pool, M)
alpha <- rep(0.01, times=M)
beta <- rep(0, M)
noise <- runif(n=M, min=-1e-2, max=1e-2)
beta <- beta+noise
data_table <- table_bayes_datagen(M=M, N_case=N_case, N_control=N_control, q=q, alpha=alpha, beta=beta)
C_1 <- qnorm(p = 1-alpha_level)
M <- ncol(data_table)
#   C_2 <- 1/(
#     N_case/N_control + C_1^2/(4*N_control*p_hat) +
#       sqrt(
#         (N_case/N_control + N_case^2/N_control^2)*C_1^2/(2*N_control*p_hat) +
#           C_1^4 /(16*N_control^2*p_hat^2)
#       )
#   )
T_result <- numeric(M)
D_set <- numeric(0)
for(j in 1:M){
X_case <- sum(data_table["case", j])
X_control <- sum(data_table["control", j])
if(X_case==0 & X_control==0){
next
}
T_result[j] <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
if(T_result[j] >= C_1){
D_set <- c(D_set, j)
}
}
if(length(D_set)==0){
T_result <- 0
T_result
}else{
X_case <- sum(data_table["case", D_set])
X_control <- sum(data_table["control", D_set])
T_result <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
T_result
}
M <- 10
N_case <- 1000
N_control <- 1000
q <- sample(q_pool, M)
alpha <- rep(0.01, times=M)
beta <- rep(0, M)
noise <- runif(n=M, min=-1e-2, max=1e-2)
beta <- beta+noise
data_table <- table_bayes_datagen(M=M, N_case=N_case, N_control=N_control, q=q, alpha=alpha, beta=beta)
C_1 <- qnorm(p = 1-alpha_level)
M <- ncol(data_table)
#   C_2 <- 1/(
#     N_case/N_control + C_1^2/(4*N_control*p_hat) +
#       sqrt(
#         (N_case/N_control + N_case^2/N_control^2)*C_1^2/(2*N_control*p_hat) +
#           C_1^4 /(16*N_control^2*p_hat^2)
#       )
#   )
T_result <- numeric(M)
D_set <- numeric(0)
for(j in 1:M){
X_case <- sum(data_table["case", j])
X_control <- sum(data_table["control", j])
if(X_case==0 & X_control==0){
next
}
T_result[j] <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
if(T_result[j] >= C_1){
D_set <- c(D_set, j)
}
}
if(length(D_set)==0){
T_result <- 0
T_result
}else{
X_case <- sum(data_table["case", D_set])
X_control <- sum(data_table["control", D_set])
T_result <- (X_case - N_case/N_control*X_control)/sqrt(X_case + N_case^2/N_control^2*X_control)
T_result
}
T_results
M <- 10
N_case <- 1000
N_control <- 1000
q <- sample(q_pool, M)
alpha <- rep(0.01, times=M)
beta <- rep(0, M)
noise <- runif(n=M, min=-1e-2, max=1e-2)
beta <- beta+noise
beta <- rep(0, M)
N <- 1000
T_results <- numeric(N)
for(k in 1:N){
data_table <- table_bayes_datagen(M=M, N_case=N_case, N_control=N_control, q=q, alpha=alpha, beta=beta)
T_results[k] <- ePAST(data_table=data_table, N_case=N_case, N_control=N_control)
}
sum(T_results>qnorm(0.95), na.rm = TRUE)/N
mean(T_results>qnorm(0.95))
q_pool
sample(q_pool)
sample(q_pool, size = 1)
alpha <- 0.01
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
qU_to_qA <- function(qU, alpha){
qA <- qU*(1-alpha) + alpha
return(qA)
}
alpha <- 0.01
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.01
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.01
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.01
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.015/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.015/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.015/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.015/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.015/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.015/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
alpha <- 0.04/50
qU <- sample(q_pool, size = 1)
qA <- qU_to_qA(qU, alpha)
cat(qA, qU, "\n", sep = ",")
qU <- sample(q_pool, size = 50)
qU
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
gPAR <- 0.015
M <- 50 # total number of variants
m <- 10 # number of risk allele
qU <- sample(q_pool, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
alpha
qA <- qU_to_qA(qU, alpha)
qA
plot(qA, qU)
abline(y=x)
abline(x)
plot(qA, qU)
abline(a=0, b = 1)
gPAR <- 0.04
M <- 50 # total number of variants
m <- 10 # number of risk allele
qU <- sample(q_pool, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
plot(qA, qU)
abline(a=0, b = 1)
genotypes["case", j] <- rbinom(n = N_case, prob = qA[j])
genotypes["case", j] <- rbinom(n = N_case, size = 1,  prob = qA[j])
rbinom(n = N_case, size = 1,  prob = qA[j])
rbinom(n = N_case, size = 1,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
rbinom(n = 1, size = N_case,  prob = qA[j])
gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
gPAR_table_datagen <- function(M, qU, alpha, N_case, N_control){
genotypes <- matrix(0, nrow=2, ncol=M, dimnames=list( c("case", "control"), paste("G",1:M,sep="")) )
for(j in 1:M){
genotypes["case", j] <- rbinom(n = 1, size = N_case,  prob = qA[j])
genotypes["control", j] <- rbinom(n = 1, size = N_case,  prob = qU[j])
}
return(genotypes)
}
gPAR <- 0.04
M <- 50 # total number of variants
m <- 10 # number of risk allele
qU <- sample(q_pool, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
data_table
gPAR <- 0.04
M <- 100 # total number of variants
m <- 10 # number of risk allele
qU <- sample(q_pool, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
data_table
mPAST(data_table)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
K = 1000
J = 1000
gPAR <- 0.04
M <- 100 # total number of variants
m <- 10 # number of risk allele
N_case = 1000
N_control = 1000
power_results <- numeric(K)
for(i in 1:K){
qU <- sample(q_pool, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
T_results <- numeric(J)
for(j in 1:J){
cat(i, j , sep = ",", fill = TRUE)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
T_results[j] <- mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
}
power_results[i] <- mean(T_results[j] > 1.65)
}
power_results
power_results[1:10]
T_results
T_results <- numeric(J)
for(j in 1:J){
cat(i, j , sep = ",", fill = TRUE)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
T_re
T_results <- numeric(J)
for(j in 1:J){
cat(i, j , sep = ",", fill = TRUE)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
T_results[j] <- mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
}
T_results
mean(T_results[j] > 1.65)
mean(T_results > 1.65)
K = 1000
J = 1000
gPAR <- 0.1
M <- 100 # total number of variants
m <- 10 # number of risk allele
N_case = 1000
N_control = 1000
power_results <- numeric(K)
for(i in 1:K){
qU <- sample(q_pool, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
T_results <- numeric(J)
for(j in 1:J){
cat(i, j , sep = ",", fill = TRUE)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
T_results[j] <- mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
}
power_results[i] <- mean(T_results > 1.65)
}
power_results[1:50]
mean(power_results[1:50])
q_pool
q_pool_e2 <- q_pool[q_pool<1e2]
q_pool_e2
q_pool_e2
length(q_pool_e2)
q_pool_e2 <- q_pool[q_pool<1e-2]
length(q_pool_e2)
for(i in 1:K){
qU <- sample(q_pool_e2, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
T_results <- numeric(J)
for(j in 1:J){
cat(i, j , sep = ",", fill = TRUE)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
T_results[j] <- mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
}
power_results[i] <- mean(T_results > 1.65)
}
power_results[1:8]
power_results[1:7]
source(file = "Wright's formula.R")
source(file = "gPAR_table_datagen.R")
source(file = "mPAST.R")
source(file = "Wright's formula.R")
q_pool <- replicate(10000, r_wright())
K = 1000
J = 1000
gPAR <- 0.1
M <- 100 # total number of variants
m <- 10 # number of risk allele
N_case = 1000
N_control = 1000
power_results <- numeric(K)
q_pool_e2 <- q_pool[q_pool<1e-2]
for(i in 1:K){
qU <- sample(q_pool_e2, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
T_results <- numeric(J)
for(j in 1:J){
cat(i, j , sep = ",", fill = TRUE)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
T_results[j] <- mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
}
power_results[i] <- mean(T_results > 1.65)
}
gPAR_list <- seq(0, 0.1, by=0.01)
gPAR_list
data.frame(gPAR=gPAR_list, power = power_list, stringsAsFactors = FALSE)
source(file = "gPAR_table_datagen.R")
source(file = "mPAST.R")
source(file = "Wright's formula.R")
file_name = "rare_variants_only"
q_pool <- replicate(10000, r_wright())
gPAR_list <- seq(0, 0.1, by=0.01)
power_list <- NULL
K = 1000
J = 1000
M <- 100 # total number of variants
m <- 10 # number of risk allele
N_case = 1000
N_control = 1000
for(gPAR in gPAR_list){
power_results <- numeric(K)
q_pool_e2 <- q_pool[q_pool<1e-2]
for(i in 1:K){
qU <- sample(q_pool_e2, size = M)
alpha <- c(rep(gPAR/m, m) , rep(0, M-m) )
qA <- qU_to_qA(qU, alpha)
T_results <- numeric(J)
for(j in 1:J){
cat(i, j , sep = ",", fill = TRUE)
data_table <- gPAR_table_datagen(M = M, qU = qU, alpha = alpha, N_case = N_case, N_control = N_control)
T_results[j] <- mPAST(data_table = data_table, N_case =  N_case, N_control = N_control)
}
power_results[i] <- mean(T_results > 1.65)
}
power_list <- c(power_list, mean(power_results) )
}
power_list
power_results[1:4]
